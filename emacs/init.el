(defmacro load-module (module)
  `(load-file (expand-file-name ,(format "modules/%s.el" (symbol-name module)) user-emacs-directory)))

(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
        (elpaca-use-package-mode))

(package-initialize)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(if (file-exists-p custom-file)
    (load custom-file))

(dolist (variable '(initial-frame-alist default-frame-alist))
  (set variable `((horizontal-scroll-bars . nil)
                  (vertical-scroll-bars . nil)
                  (menu-bar-lines . 0)
                  (tool-bar-lines . 0))))

(use-package exec-path-from-shell :ensure t)

(setq-default tab-width 8)
(setq-default indent-tabs-mode nil)
(setq frame-resize-pixelwise t)
(setq frame-inhibit-implied-resize t)
(setq create-lockfiles nil)
(setq make-backup-files nil)
(setq delete-by-moving-to-trash t)
(setq ring-bell-function 'ignore)
(setq auto-save-default nil)
(setq use-dialog-box nil)
(setq inhibit-startup-message t)
(setq use-short-answers t)
(setq mouse-wheel-scroll-amount '(8))
(setq mouse-wheel-progressive-speed nil)
(setq scroll-conservatively 101)
(setq scroll-step 1)
(setq scroll-margin 0)
(setq maximum-scroll-margin 0)
(setq scroll-preserve-screen-position t)
(setq use-file-dialog nil)
(setq use-dialog-box nil)

(load-module ui)
(load-module terminal)
(load-module editor)
(load-module files)
(load-module llm)
(load-module org)
(load-module languages)
